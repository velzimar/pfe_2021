{% extends 'base.html.twig' %}

{% block title %}calendar{% endblock %}
{% block  breadcrumb %}

{% endblock %}

{% block body %}

    <style>

        body {
            margin: 40px 10px;
            padding: 20px;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        }

        #calendar {
            max-width: 1800px;
            margin: 0 auto;
        }

        .fc-v-event .fc-event-main-frame {
            height: fit-content;
            display: flex;
            flex-direction: column;
        }

    </style>



    {# % do form.slots.setRendered %} #}

    <div class="col-sm-12">
        <div class="element-wrapper">
            <div class="element-box">
                <h5 class="form-header">
                    {{ product.nom }}
                </h5>
                <div class="form-desc">
                    Gestion de réservation
                </div>
                {{ form_start(form) }}
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-4">

                            {{ form_row(form.period,{
                                'value':"00:15",
                                'id':'period',
                                'label':"Période",
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>

                        <div class="col-sm-4">
                            {{ form_row(form.min,{
                                'value':"09:00",
                                'id':'min',
                                'label':"Min",
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-sm-4">
                            {{ form_row(form.max,{
                                'value':"18:00",
                                'id':'max',
                                'label':"Max",
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                    </div>
                </div>
                <div class="form-desc">
                </div>
                <h6 class="form-header">
                    Selectionner vos horaires disponibles
                </h6>
                <div id='calendar'></div>

                <div class="form-desc">
                </div>

                <div id="active_checkbox">
                    {{ form_row(form.isActive,{
                        'label':"Activer la réservation",
                    }) }}
                </div>
                <div class="form-buttons-w">
                    <div class="row">
                        <div class="col-auto mr-auto">
                            <button class="btn btn-primary " type="submit" onclick="_save()"> Save</button>
                        </div>
                        <div class="col-auto">
                            <button class="btn" type="reset">Annuler</button>
                        </div>
                    </div>
                </div>
            </div>
            {{ form_end(form) }}
        </div>
    </div>

{% endblock %}


{% block javascripts %}
    <script>
        let duration = '00:15:00';
        let duration_in_minutes=15;
        let min = "09:00:00";
        let max = "18:00:00";
        generate_calendar()
        let json_to_send

        function updateDuration(d) {
            duration = d + ":00";
            var a = duration.split(':'); // split it at the colons
            duration_in_minutes = (+a[0]) * 60 + (+a[1]);
            generate_calendar();
        }


        function diff(){

            m = max;
            //alert(m)
            m_hours = parseInt(m[0] + m[1])
            m_minute = parseInt(m[3] + m[4])
            //alert(m_hours)
            //alert(m_minute)
            m_all_minutes = m_minute+m_hours*60
            //alert(m_all_minutes)
            mi = min

            mi_hours = parseInt(mi[0] + mi[1])
            mi_minute = parseInt(mi[3] + mi[4])
            mi_all_minutes = mi_minute+mi_hours*60
            //alert(m_all_minutes-mi_all_minutes)
            return m_all_minutes-mi_all_minutes
        }
        function updateMin(d) {

            min = d;
            $("#min").val(min)
            generate_calendar();

        }

        function updateMax(d) {
           // alert(d)
            max = d;
            $("#max").val(max)
            generate_calendar();
        }
        $("#active_checkbox").change(function () {
            d = $(this).val();
            //alert(d)
        })

        function fitMax(){

            mod = diff()%duration_in_minutes

            newMax_all_minutes = m_all_minutes-mod
            newMax_minutes = newMax_all_minutes % 60
            newMax_hours = (newMax_all_minutes-newMax_minutes)/60
            newMax_hours_string = newMax_hours.toString()
            newMax_minutes_string = newMax_minutes.toString()

            if(newMax_hours_string.length===1) {
                newMax_hours_string="0"+newMax_hours_string
            }

            if(newMax_minutes_string.length===1) {
                newMax_minutes_string="0"+newMax_minutes_string
            }
            updateMax(newMax_hours_string+":"+newMax_minutes_string)
        }

        function fitMin(){
            mod = diff()%duration_in_minutes

            newMin_all_minutes = mi_all_minutes+mod

            newMin_minutes = newMin_all_minutes % 60
            newMin_hours = (newMin_all_minutes-newMin_minutes)/60
            newMin_hours_string = newMin_hours.toString()
            newMin_minutes_string = newMin_minutes.toString()

            if(newMin_hours_string.length===1) {
                newMin_hours_string="0"+newMin_hours_string
            }

            if(newMin_minutes_string.length===1) {
                newMin_minutes_string="0"+newMin_minutes_string
            }
            updateMin(newMin_hours_string+":"+newMin_minutes_string)
        }

        $("#period").change(function () {
            old = duration.substr(0,5) ;
            d = $(this).val();
            hour = parseInt(d[0] + d[1])
            minute = parseInt(d[3] + d[4])
           // alert("diff()")
            ii = diff()
           // alert(ii)
           // alert("minute+hour*60")
           // alert(minute+hour*60)
            x = (minute+hour*60 === ii)
            y = (ii>(minute+hour*60))
          //  alert(minute+hour*60 === ii)
           // alert(ii>(minute+hour*60))
            if ( d[2] === ":" && hour >= 0 && hour <= 23 && (minute > 0 || hour>0) && minute <= 59 && d.length === 5 && (x||y) ) {

                  //  alert("here")
                    updateDuration(d)
                    //fix max
                    fitMax()

            } else {
                alert("wrong")
                $("#period").val(old)
            }
        })
        $("#min").change(function () {
            old = min.substr(0,5)
            d = $(this).val();
            hour = parseInt(d[0] + d[1])
            minute = parseInt(d[3] + d[4])
            all_minutes = hour*60+minute
            //alert(hour)
            //alert(minute)
            if (d[2] === ":" && hour >= 0 && hour <= 23 && (minute > 0 || hour > 0) && minute <= 59 && d.length === 5) {
                //  alert("true")

                updateMin(d)
                fitMax()




            } else {
                alert("false")
                $("#min").val(old)
            }
        })
        $("#max").change(function () {
            old = max.substr(0,5)
            d = $(this).val();
            hour = parseInt(d[0] + d[1])
            minute = parseInt(d[3] + d[4])
            all_minutes = hour*60+minute
            //alert(hour)
            //alert(minute)
            if (d[2] === ":" && hour >= 0 && hour <= 23 && (minute > 0 || hour > 0) && minute <= 59 && d.length === 5) {
                //  alert("true")

                updateMax(d)
                fitMin()




            } else {
                alert("false")
                $("#max").val(old)
            }
        })

        admin = $("#active_checkbox")
        admin_div = admin.children('div')
        admin_label = admin_div.children("label")
        admin_input = admin_div.children("input[type=checkbox]")
        admin_div.addClass("custom-control custom-checkbox")
        admin_label.addClass("custom-control-label")
        admin_input.addClass("custom-control-input")
        admin_label.before(admin_input)


        //alert(duration_in_minutes)
        //alert(duration)
        var calendar;

        function generate_calendar() {
            //alert("enterer")

            // document.addEventListener('DOMContentLoaded', function () {

            var calendarEl = document.getElementById('calendar');


            calendar = new FullCalendar.Calendar(calendarEl, {

                slotMinTime: min,
                slotMaxTime: max,
                height: "auto",
                locale: 'fr',
                navLinks: false,
                monthMode: false,
                allDaySlot: false,
                expandRows: true,
                headerToolbar: {
                    right: 'timeGridWeek'
                },
                slotDuration: duration,
                initialDate: '2020-09-12',
                selectable: true,
                selectMirror: false,
                eventOverlap: false,

                dayHeaderFormat: {weekday: 'short'},
                select: function (arg) {

                    // var title = prompt('Event Title:');

                    //  if (title) {
                    var exist = 0
                    $.each(calendar.getEvents(), function (k, v) {
                        //alert('Key = ' + k + '\n' + 'Value = ' + v);
                        if (JSON.stringify(arg.start) === JSON.stringify(v["start"])) {

                            //alert("start1" + JSON.stringify(v["start"]))
                            // alert("start2" + JSON.stringify(arg.start))
                            alert("exist")
                            exist = 1
                        }

                    });
                    if (!exist) {

                        // import { toDuration } from '@fullcalendar/moment'
                        var a = moment(arg.start.toString("YYYY-MM-DD HH:mm"));
                        var b = moment(arg.end.toString("YYYY-MM-DD HH:mm"));
                        var diffMinutes = b.diff(a, 'minutes')
                       // alert(diffMinutes)

                        var date = moment(arg.start).format('YYYY-MM-DD');
                      //  alert(date)

                        const t = moment(date); // Thursday Feb 2015
                        const dow = t.day();
                     //   alert(dow);

                        if (diffMinutes !== duration_in_minutes) {
                          //  alert(duration_in_minutes)
                            alert("Selectionner seulement un timeslot");
                            return false;
                        }
                        calendar.addEvent({
                            title: " ",
                            start: arg.start,
                            end: arg.end,
                        })
                        _save()
                        //}
                        calendar.unselect()
                    }
                },
                eventClick: function (arg) {
                    if (confirm('Are you sure you want to delete this event?')) {
                        arg.event.remove()
                        _save()
                    }
                },
                editable: false,
                dayMaxEvents: true, // allow "more" link when too many events
                events: [],
                initialView: 'timeGridWeek',
                /*
                businessHours: [ // specify an array instead
                    {
                        daysOfWeek: [ 1, 2, 3 ], // Monday, Tuesday, Wednesday
                        startTime: '08:00', // 8am
                        endTime: '18:00' // 6pm
                    },
                    {
                        daysOfWeek: [ 4, 5 ], // Thursday, Friday
                        startTime: '10:00', // 10am
                        endTime: '16:00' // 4pm
                    }
                ]*/
            });
            calendar.render();


            // });
            $(".fc-header-toolbar.fc-toolbar.fc-toolbar-ltr").hide();
        }


        function _save() {
            json_to_send = [{slots: []}, {slots: []}, {slots: []}, {slots: []}, {slots: []}, {slots: []}, {slots: []}]
          //  alert(JSON.stringify(calendar.getEvents()))
            //cleaning before sending to controller
            $.each(calendar.getEvents(), function (k, v) {


                var date = moment(v["start"]).format('YYYY-MM-DD');
                const t = moment(date); // Thursday Feb 2015
                var day = t.day();
                //alert(day);


                var start = moment(v["start"]).format('hh:mm:ss');
                var end = moment(v["end"]).format('hh:mm:ss');
                /*
                alert(day)
                alert(start)
                alert(end)
                */
                json_to_send[day]["slots"].push({start: start, end: end})
            });
           // alert(JSON.stringify(json_to_send))
            $("#product_calendar_slots").val(JSON.stringify(json_to_send))
        }

    </script>
{% endblock %}